#summary Manual Describing how to use EJML
#labels manual,Featured

= Introduction =

EJML is a linear algebra library for Java.  There are three different interfaces that can be used to program in EJML; simple, operator, and algorithm. These interfaces have different design goals and range from being easy to program, but slightly less efficient, to more difficult to program and more efficient.  A combination of example code and tutorials are provided below that introduces a user to working with EJML.  

Detailed Javadoc documentation is provided in almost all the classes.  See the [http://code.google.com/p/efficient-java-matrix-library/ home page] for a link to the latest Javadoc.

== Example Code ==
Each example code, provided below, is fully operational and included with EJML's source code in the example directory.  They are designed to show off different concepts and provide insight into how EJML can be used to its full potential.

 # [KalmanFilterExamples Kalman Filter].
    * Example of using simple, operator, and algorithm interfaces.
 # [LevenbergMarquardtExample Levenberg-Marquardt]
    * Effective matrix reshaping.
    * General example.
 # [PolynomialFitExample Polynomial Fitting]
    * Creating a linear solver.
    * Using an adjustable linear solver.

== Tutorials ==

When working with EJML it is often best to use factories instead of directly calling algorithms.  Factories are provided for solving linear systems and for common matrix decompositions.  This way as new algorithms are added your code will automatically use the best one.  Advanced users might wish to call a specific implementation, but most people should not do this.  Calling specific implementations is more difficult and more prone to errors if you do not understand all the implementation details.

 # [SolvingLinearSystems Solving Linear Systems]
 # [MatrixDecomposition Matrix Decompositions]
 # Random matrices and Matrix Features
 # Unit Testing

= Building =

EJML can be easily compiled using any IDE (e.g. Eclipse or Intellij) or by using the provided ant scripts.  To build using ant first make sure ant is installed.  Once ant is installed the project can be build by going into the commandline, changing into the project's main directory, and typing "ant".  In Linux or Windows you should see some output that looks like this:
{{{
pja@silent:~/projects/java/ejml$ ant
Buildfile: build.xml

clean:
   [delete] Deleting directory /home/pja/projects/java/ejml/build

compile:
    [mkdir] Created dir: /home/pja/projects/java/ejml/build/classes
    [javac] Compiling 94 source files to /home/pja/projects/java/ejml/build/classes

jar:
    [mkdir] Created dir: /home/pja/projects/java/ejml/build/jar
      [jar] Building jar: /home/pja/projects/java/ejml/build/jar/EJML.jar

main:

BUILD SUCCESSFUL
Total time: 3 seconds
}}}

Once it has been built the jar can be moved from "build/jar/EJML.jar" to a convenient location in your own project.