#summary Overview of SimpleMatrix

= Introduction = 

SimpleMatrix is an interface that provides an easy to use object oriented way of doing linear algebra.  It is a wrapper around the operation interface in EJML and was originally inspired by [http://math.nist.gov/javanumerics/jama/ Jama].  Unlike the operation interface it handles most of the memory management automatically and allows commands to be chained together.  Switching between SimpleMatrix and [DenseMatrix64F DenseMatrix64F] is easy, enabling the two programming paradigms to be mixed in the same code base.

The typical function in SimpleMatrix takes at least one SimpleMatrix as an input and returns a SimpleMatrix as the output.  None of the input matrices, including the 'this' matrix, are modified during function calls.  There is a slight performance hit when using SimpleMatrix and less control over memory management.  See [SpeedSimpleMatrx] for a study comparing the runtime performance of the two interfaces.  

The following is a brief overview different SimpleMatrix concepts.  More detailed usage examples are provided in the main tutorial [EjmlManual (CLICK HERE)].


== Chaining Operations ==

When using SimpleMatrix operations can be chained together.  Chained operations are often easier to read and write.
{{{
    public SimpleMatrix process( SimpleMatrix A , SimpleMatrix B ) {
        return A.transpose().mult(B).scale(12).invert();
    }
}}}
is equivalent to the following Matlab code: {{{C = inv((A' + B)*12.0)}}}


== Working with DenseMatrix64F ==

To convert a [DenseMatrix64F DenseMatrix64F] into a SimpleMatrix call the wrap() function.  Then to get access to the internal DenseMatrix64F inside of a SimpleMatrix call getMatrix().
{{{
    public DenseMatrix64F compute( DenseMatrix64F A , DenseMatrix64F B ) {
        SimpleMatrix A_ = SimpleMatrix.wrap(A);
        SimpleMatrix B_ = SimpleMatrix.wrap(B);

        return A_.mult(B_).getMatrix();
    }
}}}

A DenseMatrix64F can also be passed into the SimpleMatrix constructor, but this will copy
the input matrix.

== Accessors ==
  * get( row , col )
  * set( row , col , value )
    * Returns or sets the value of an element at the specified row and column.
  * get( index )
  * set( index )
    * Returns or sets the value of an element at the specified index.  Useful for vectors and element-wise operations.
  * iterator( boolean rowMajor, int minRow, int minCol, int maxRow, int maxCol )
    * An iterator that iterates through the sub-matrix by row or by column.

== Submatrices ==

A submatrix is a matrix whose elements are a subset of another matrix.  Several different functions are provided for manipulating submatrices.

  * extractMatrix : Extracts a rectangular submatrix from the original matrix.
  * extractDiag : Creates a column vector containing just the diagonal elements of the matrix.
  * extractVector : Extracts either an entire row or column.
  * insertIntoThis : Inserts the passed in matrix into 'this' matrix.
  * combine : Creates a now matrix that is a combination of the two inputs.