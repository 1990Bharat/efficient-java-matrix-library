#summary Frequently Asked Questions
#labels FAQ

= Frequently Asked Questions=

Here is a list of frequently asked questions about EJML.  Most of these questions have been asked and answered several times already.

== Why does EJML crash when I try to process a matrix with 1,000,000 by 1,000,000 elements, or some other very large matrix? ==
 
If you are working with large matrices first do a quick sanity check.  Ask yourself, how much memory is that matrix using and can my computer physically store it?  Compute the number of required gigabytes with the following equation:

{{{
  memory in gigabytes = (columns * rows*8)/(1024*1024*1024)
}}}

Now take the number and multiply it by 3 or 4 to take in account overhead/working memory and that's about how much memory your system will need to do anything useful.  This is true for ALL dense linear algebra libraries.  EJML is also limited by the size of a Java array, which can have at most 2^32 elements.  If you are lucky and the system is sparse (full of mostly zeros) there might be other libraries out there which can help you. 

The other potentially fatal problem is that very large matrices are very slow to process. So even if you have enough RAM on your computer the time to compute the solution could well exceed the lifetime of a typical human.
 
== Why relase EJML under the LGPL and not something like Apache or BSD licenses? ==

The LGPL license is actually fairly liberal and much less restrictive than the GPL license.  For instance, with the LGPL license you can use EJML and NOT need to release your source code, like you would under the GPL.  So the LGPL lacks the "viral" nature of the GPL.  The only time some of your code would need to be released under the LGPL is if you/your company modified the library itself, e.g. fixed a bug or improved the speed of an algorithm.  Even then only that code which exists inside of EJML would need to be released publicly.  I would also hope you donated any such enhancements back to EJML...

== Will EJML work on Android? ==

Yes EJML has been used for quite some time on Android.  The library does include a tinny bit of swing code, which will not cause any problems as long as you do not call anything related to visualization.  The nogui jar is really not necessary and was requested before I did any Android development myself.

If you are getting compilation errors complaining about the swing code when using EJML then you need to stop compiling EJML inside of your Android project.  Just grab the precompiled jar and it into the lib/ directly and the Android development platform will take care of the rest.
